ALX First Listings ‚Äî Developer #2 Specification
üîÑ simplification (newest first)
‚óè	Escrow model added: Wallet signal replaced with USDC escrow at bid commit. Bids lock funds; refunds/top-ups on edit; release on cancel or loss. Simplifies settlement and ensures real bids.

‚óè	Winner reveal: Only the winning bid is revealed publicly; all others remain sealed. ALX host can see bids, but users cannot.

‚óè	Bid editing: Allowed up or down, once per hour, respecting reserve and cap. Escrow balance adjusts automatically.

‚óè	Cancel: Users may cancel anytime before settlement; escrow is refunded immediately.

‚óè	Whitelist: External provider (Merkle or signature) still required at commit and optionally re-checked before transfer. Dev 2 integrates only via interface.

‚óè	Reserve: Reserve is public at IPO creation (floor). Admin sets OTC price; contract enforces cap = OTC √ó 1.30. UI shows both.

‚óè	Auction type: Sealed-bid, second-price. Winner pays max(second-highest bid, reserve).

‚óè	Tie-break: If multiple bids at top price: sort by ALX Score, take top 20, VRF-shuffle, attempt in order until settlement succeeds.

‚óè	Events: Expanded to log escrow flows, edits, cancels, settlement outcomes.

‚óè	Admin dApp: Clarified single-page admin UI (Safe multisig wallets only). Shows UTC times; UI also displays EDT with DST.

________________________________________
‚öôÔ∏è Auction Rules (English)
1.	Auction type: Sealed-bid, second-price.

‚óã	Bidders place hidden bids; only the final winner is revealed.

‚óã	Winner pays the second-highest bid or the reserve, whichever is greater.

2.	Reserve & Cap:

‚óã	Reserve = public floor set by Admin.

‚óã	Cap = 130% of OTC reference price.

‚óã	All bids must fall between reserve and cap.

3.	Escrow:

‚óã	On commit, full bid amount is escrowed.

‚óã	If bidder edits upward ‚Üí must deposit more.

‚óã	If edits downward ‚Üí refund the difference.

‚óã	If canceled or lost ‚Üí full refund to user‚Äôs balance.

‚óã	If winner ‚Üí settlement pulls escrow at clearing price, refunds surplus.

4.	Settlement:

‚óã	Auto-runs after close.

‚óã	Sorts bids high ‚Üí low; applies second-price rule.

‚óã	If tie at top price ‚Üí rank by ALX Score ‚Üí take top 20 ‚Üí VRF-shuffle ‚Üí attempt each in order.

‚óã	If all top tier fail, move to next tier.

‚óã	If no bids ‚â• reserve, IPO fails; NFT remains in custody.

________________________________________
üì¶ Storage Shapes (Solidity)
enum Phase { NotStarted, Commit, Reveal, SettleReady, Settled }
enum DefaultReason { None, InsufficientBalance, InsufficientAllowance, TransferFailed }
enum BidStatus { None, Committed, Revealed, Canceled, Superseded }

struct IPO {
  address asset;       // ERC-721 collection (ALX)
  uint256 tokenId;     // unique 1:1 token
  address seller;      // custody wallet
  address currency;    // USDC
  uint64 commitStart;  // UTC
  uint64 commitEnd;    // UTC
  uint64 revealEnd;    // UTC
  uint256 reserve;     // public reserve
  uint256 cap;         // OTC * 1.30
  bool settled;
  uint32 commitCount;
  uint32 revealCount;
}

struct BidMeta {
  uint256 escrowed;    // funds locked at commit
  bytes32 commitHash;  // keccak256(salt, amount, bidder)
  uint64 commitTime;   // FIFO tie-break
  uint256 amount;      // revealed (if winner)
  uint256 score;       // ALX Score (external)
  BidStatus status;
}

________________________________________
üîë Core Functions
function createIPO(CreateParams calldata p) external onlyRole(ADMIN_ROLE);

function commitBid(
  uint256 ipoId,
  bytes32 commitHash,
  uint256 escrowAmount,
  bytes calldata whitelistProofOrSig
) external;

function editBid(
  uint256 ipoId,
  bytes32 newCommitHash,
  uint256 newEscrowAmount,
  bytes calldata whitelistProofOrSig
) external;

function cancelBid(uint256 ipoId) external;

function revealWinner(
  uint256 ipoId,
  bytes32 salt,
  uint256 amount,
  uint256 score,
  bytes calldata scoreProof
) external; // only winning bid revealed

function settleWithRandomness(uint256 ipoId, uint256 randomSeed) external;

________________________________________
üîê Interfaces
interface IWhitelistProvider {
  function isAllowed(uint256 ipoId, address account, bytes calldata proofOrSig)
    external view returns (bool);
}

interface IScoreRegistry {
  function scoreOf(address wallet) external view returns (uint256);
}

________________________________________
üì° Events
event IPOCreated(...);
event Committed(uint256 indexed ipoId, address indexed bidder, uint256 escrowed);
event Edited(uint256 indexed ipoId, address indexed bidder, uint256 newEscrowed);
event Canceled(uint256 indexed ipoId, address indexed bidder);
event WinnerFinal(uint256 indexed ipoId, address indexed winner, uint256 clearingPrice);
event FailedReserve(uint256 indexed ipoId, uint256 reserve);
event AuctionOutcome(...);

________________________________________
üñ•Ô∏è Admin DApp
‚óè	Create IPO Form: asset, tokenId, seller, reserve, OTC, computed cap, commit/reveal/close times (UTC).

‚óè	Dashboard: IPO list with status, timers, counts.

‚óè	Events Panel: show IPOCreated, WinnerFinal, FailedReserve.

‚óè	Auto-Add: UI listens for IPOCreated; new listings appear instantly.

‚óè	Time Zones: Store UTC on chain; show UTC + EDT (with DST) in UI.

________________________________________
‚úÖ One-Line Why for Escrow
Escrow ensures bids are real, simplifies settlement, and lets non-winning funds roll forward as buying power for other First Listings.
‚Äî--

CONTINUED MORE DETAILED SPEC BELOW

ALX First Listings ‚Äî Dev 2 Final Reference Spec
0) Change log (summary of what‚Äôs simplified / clarified today)
‚óè	Escrow model: Replaced ‚Äúwallet signal‚Äù with USDC escrow at bid commit. Bids lock funds; edits top-up or refund the delta; cancel refunds; losers‚Äô funds become available balance for other First Listings.

‚óè	Sealed from users, host-visible: Other bidders cannot see amounts while live. ALX (host) can see bids via backend and contract state. Only the winning bid is revealed publicly at the end.

‚óè	Public reserve, market value cap: Admin publishes reserve (floor) and OTC market value. Contract enforces cap = market √ó 1.30.

‚óè	Auction type fixed: Sealed-bid, second-price. Winner pays max(second-highest, reserve).

‚óè	Tie-break finalization: If a tie at top price ‚Üí rank by ALX Score (desc), take top 20, VRF-shuffle, attempt settlement in that order; if all fail, go to the next price tier.

‚óè	Edits & cancel: Edit once per hour per IPO; cancel anytime pre-settle. Escrow adjusts automatically.

‚óè	Timing & T+21: On-chain times in UTC; UI shows UTC + EDT with DST. First Listings are run as T+21 events so settlement occurs within 21 days while asset onboarding, custody verification, and tokenization are completed (capital-efficient).

‚óè	Admin dApp & events: Clear admin UI; rich events for auto-listing in the UI and for external indexers.

One-line why escrow: Escrow ensures bids are real, simplifies settlement, and lets non-winning funds roll forward as buying power for other First Listings.
________________________________________
1) Concept & goals
‚óè	What First Listings are: Daily IPO-like primary offerings that bring custody-verified cultural assets onto the ALX exchange with on-chain transparency.

‚óè	User promise: Simple, fair participation; reserve disclosed; no public bid leaks during the auction; only the winner is revealed.

‚óè	Platform promise: Capital-efficient T+21 settlement using cleared funds; pricing aligned to real-world markets with a +30% cap; deterministic and auditable settlement.

________________________________________
2) Policy summary (english)
‚óè	Auction type: Sealed bid, second price.

‚óè	Reserve: Public floor per asset; bids must be ‚â• reserve.

‚óè	Cap: 130% of published market value (OTC). Bids must be ‚â§ cap.

‚óè	Sealed model: Other users cannot see bids while live; ALX can see through backend/contract; only the winner is revealed at the end.

‚óè	Edits & cancel: Edit up/down (1√ó per hour) within reserve‚Äìcap; cancel anytime pre-settle.

‚óè	Escrowed funds: Full bid is escrowed at commit; edits top-up/refund delta; cancel refunds; losers‚Äô funds become available balance; winner‚Äôs escrow is used at clearing price and any surplus is refunded.

‚óè	Tie-break: If multiple at the top price ‚Üí rank by ALX Score -> take top 20 -> VRF shuffle -> try in order.

‚óè	T+21: Settlement occurs within 21 days while the asset is onboarded, custody verified, and tokenized.

________________________________________
3) Network & environment
‚óè	Chain: Base (beta on Base Sepolia, then Base mainnet).

‚óè	Admin wallet: ALX Safe (multisig).

‚óè	Currency: USDC on Base.

‚óè	NFT: Single ALX ERC-721 collection (one contract, many tokenIds).

________________________________________
4) Roles & external systems (Dev 2 consumes, does not build)
‚óè	Whitelist provider: Merkle or EIP-712 signature allowlist. Dev 2 only calls isAllowed(...).

‚óè	ALX Score: Attestation (EIP-712) verifier or on-chain registry. Dev 2 verifies/reads score at reveal; uses only for tie-break.

‚óè	Randomness: Chainlink VRF for tie pool shuffling.

‚óè	Automation: Chainlink Automation or Gelato to call settlement permissionlessly right after close.

‚óè	Indexing: The Graph subgraph (or equivalent) for UI and external feeds.

________________________________________
5) Data model (Solidity storage)
enum Phase { NotStarted, Commit, Reveal, SettleReady, Settled }
enum BidStatus { None, Committed, Revealed, Canceled, Superseded }
enum DefaultReason { None, InsufficientBalance, InsufficientAllowance, TransferFailed }

struct IPO {
  address asset;        // ERC-721 collection (ALX)
  uint256 tokenId;      // 1:1 token
  address seller;       // custody wallet
  address currency;     // USDC
  uint64  commitStart;  // UTC
  uint64  commitEnd;    // UTC
  uint64  revealEnd;    // UTC
  uint256 reserve;      // public floor
  uint256 cap;          // marketValue * 1.30
  bool    settled;
  uint32  commitCount;
  uint32  revealCount;
}

struct BidMeta {
  uint256 escrowed;     // locked USDC for this bid
  bytes32 commitHash;   // keccak256(salt, amount, bidder)
  uint64  commitTime;   // FIFO tiebreak
  uint256 amount;       // revealed amount (winner will be public)
  uint256 score;        // ALX Score (set on reveal)
  BidStatus status;     // Committed/ Revealed/ Canceled/ Superseded
}

// Primary storage
IPO[] public ipos;  // ipoId = index
mapping(uint256 => mapping(address => BidMeta)) public bids; // ipoId => bidder => bid
mapping(uint256 => address[]) public biddersByIPO;           // to scan at settle
mapping(uint256 => mapping(address => uint256)) public lastEditAt; // edit cooldown

Privacy note: Do not emit escrow amounts in events during commit/edit/cancel. Only the final winner‚Äôs clearing price is emitted.
________________________________________
6) External interfaces
interface IWhitelistProvider {
  function isAllowed(uint256 ipoId, address account, bytes calldata proofOrSig)
    external view returns (bool);
}

interface IScoreVerifier { // attestation path
  function verifyScore(address wallet, uint256 score, uint256 epochId, bytes calldata sig)
    external view returns (bool);
}
// or registry path
interface IScoreRegistry {
  function scoreOf(address user) external view returns (uint256);
}

________________________________________
7) Events (UI + audit)
event IPOCreated(
  uint256 indexed ipoId, address indexed asset, uint256 indexed tokenId,
  address currency, uint256 reserve, uint256 cap,
  uint64 commitStart, uint64 commitEnd, uint64 revealEnd
);

event Committed(uint256 indexed ipoId, address indexed bidder);          // no amounts
event Edited(uint256 indexed ipoId, address indexed bidder);             // no amounts
event Canceled(uint256 indexed ipoId, address indexed bidder);
event SettlementStarted(uint256 indexed ipoId, uint256 randomSeedUsed);
event FinalistPool(uint256 indexed ipoId, address[] wallets);            // addresses only
event FinalistOrder(uint256 indexed ipoId, address[] wallets);           // order after VRF
event Defaulted(uint256 indexed ipoId, address indexed bidder, DefaultReason reason);
event WinnerFinal(uint256 indexed ipoId, address indexed winner, uint256 clearingPrice);
event FailedReserve(uint256 indexed ipoId, uint256 reserve);
event AuctionOutcome(
  uint256 indexed ipoId, address indexed asset, uint256 indexed tokenId,
  address currency, uint256 basePrice, bool sold, address winner, address seller
);

________________________________________
8) Core function signatures
struct CreateParams {
  address asset;
  uint256 tokenId;
  address seller;
  address currency;    // USDC
  uint64  commitStart; // UTC
  uint64  commitEnd;   // UTC
  uint64  revealEnd;   // UTC
  uint256 reserve;     // public
  uint256 cap;         // market * 1.30
}

function createIPO(CreateParams calldata p) external onlyRole(ADMIN_ROLE);

// Escrowed commit (full intended bid locked)
function commitBid(
  uint256 ipoId,
  bytes32 commitHash,
  uint256 escrowAmount,
  bytes calldata whitelistProofOrSig
) external;

// Edit once per hour: top-up or refund delta; new sealed commit
function editBid(
  uint256 ipoId,
  bytes32 newCommitHash,
  uint256 newEscrowAmount,
  bytes calldata whitelistProofOrSig
) external;

// Cancel pre-settle: refund full escrow
function cancelBid(uint256 ipoId) external;

// Only winner is revealed publicly at the end
function revealWinner(
  uint256 ipoId,
  bytes32 salt,
  uint256 amount,
  uint256 score,            // if using attestation
  uint256 epochId,
  bytes calldata scoreSig
) external;

// Permissionless settlement after revealEnd
function settleWithRandomness(uint256 ipoId, uint256 randomSeed) external;

Guards enforced on-chain
‚óè	Always: reserve ‚â§ amount ‚â§ cap.

‚óè	Edit cooldown: 1 hour per IPO.

‚óè	Whitelist: required at commit and edit.

‚óè	RevealWinner: verifies commit hash, range, and ALX Score proof/registry.

________________________________________
9) Escrow mechanics (how money moves)
Commit
‚óè	User calls commitBid with escrowAmount (their sealed bid).

‚óè	Contract pulls USDC (transferFrom) and locks it in bids[ipoId][user].escrowed.

‚óè	commitHash is stored; no amounts are emitted in events.

Edit (once per hour)
‚óè	New sealed commitHash + newEscrowAmount.

‚óè	If higher ‚Üí pull delta into escrow; if lower ‚Üí refund delta to user (or to their available balance in your ledger, if you prefer pooled UX).

‚óè	Prior commit marked Superseded; new record set as Committed.

Cancel
‚óè	Refund full escrowed; set status Canceled.

Settlement
‚óè	Winner‚Äôs clearing price debited from their escrow and sent to the seller; any surplus escrow is refunded to user.

‚óè	Losers‚Äô escrow is released back as available balance (for re-bids); optionally expose withdraw() for off-ramp.

Note on secrecy: Escrow transfers happen, but do not log amounts in events; typical users won‚Äôt see bid sizes in the UI. If deeper privacy is required later, we can migrate to pooled user balances + per-IPO locks without emitting per-bid values.
________________________________________
10) Winner selection and settlement algorithm
1.	Close guard: after revealEnd, call settleWithRandomness(ipoId, randomSeed) (anyone or via Automation).

2.	Collect valid bids: status is Revealed for the winner (others remain sealed to public); for ordering we rely on host visibility plus escrowed amounts in state.

3.	Sort by price tiers: high ‚Üí low.

4.	Second-price rule: clearingPrice = max(secondHighest, reserve).

5.	Tie at top price:

‚óã	Rank by ALX Score (desc), then FIFO commitTime (asc).

‚óã	Take top 20 and VRF-shuffle order.

‚óã	Attempt settlement in that order. If a wallet fails (unexpected allowance changes etc.), emit Defaulted(...) and try next.

6.	Fallback: If all top tier fail, go to next lower tier and repeat.

7.	Outcomes:

‚óã	Sold ‚Üí emit WinnerFinal + AuctionOutcome.

‚óã	FailedReserve ‚Üí emit FailedReserve + AuctionOutcome with sold=false.

Why this balance: It rewards activity via the score, prevents the same wallet from always winning, and uses VRF to keep selection fair.
________________________________________
11) Interfaces Dev 2 integrates (not owning)
‚óè	Whitelist: IWhitelistProvider.isAllowed(ipoId, wallet, proofOrSig)

‚óè	Score:

‚óã	Attestation path: IScoreVerifier.verifyScore(wallet, score, epochId, sig) at revealWinner

‚óã	Registry path: IScoreRegistry.scoreOf(wallet)

Dev 2 only reads/verifies these. Another dev/team owns signing, roots, epochs.
________________________________________
12) Admin dApp and public UI
Admin (First Listings subdomain)
‚óè	Create Listing form: collection, tokenId, seller, USDC, market value (OTC), reserve, auto-computed cap (MV √ó 1.30), commit/reveal/close times (UTC).

‚óè	Publish: calls createIPO from ALX Safe.

‚óè	Dashboard: show status, timers (UTC + EDT with DST), commit/reveal counts.

‚óè	Auto-add: UI listens for IPOCreated and updates list immediately.

Public pages (same subdomain)
‚óè	Listings page: filter/sort upcoming and live First Listings; show market value, reserve, cap rule, countdowns (UTC + EDT).

‚óè	Detail page: place / edit / cancel bid; show Available Balance; show auto list preference for the exchange (default 5%, menu 5/10/15/20, toggle off).

‚óè	Visibility: never show others‚Äô bids or amounts while live; after settlement show winner address and clearing price.

________________________________________
13) Gas, approvals, and meta-tx
‚óè	Meta-tx (ERC-2771 MinimalForwarder): ALX relayer can submit user txs so UX is smooth.

‚óè	Escrow transfer: use permit2 (or EIP-2612 if supported) to avoid an extra approve step; fallback to standard approve + commitBid.

‚óè	Owner of gas: ALX pays via relayer where feasible; users pay their USDC transfer in the worst case.

________________________________________
14) Security & audit notes
‚óè	Access control: only ALX Safe can createIPO.

‚óè	Reentrancy guards on escrow moves and settlement.

‚óè	Never emit per-bid amounts in events (only final winner).

‚óè	Unit tests for all state transitions; fuzz on price tiers and VRF ordering.

‚óè	Pause / kill switch owned by Safe (emergency).

________________________________________
15) Test plan (must-pass)
‚óè	Create IPO: reserve/cap/times validation.

‚óè	Commit: whitelist gate; escrow pull; event without amount.

‚óè	Edit: 1-hour cooldown; top-up/down delta; no amount in event.

‚óè	Cancel: refund full escrow; cannot settle canceled bids.

‚óè	Range guards: reserve ‚â§ amount ‚â§ cap everywhere.

‚óè	Tie-breaks: score ordering, FIFO, top-20 VRF shuffle reproducible.

‚óè	Second-price calc: multiple tiers and single-bid case (pay reserve).

‚óè	Settlement: winner pays seller; surplus refunded; losers released to available balance; FailedReserve path.

‚óè	Time zones: UTC stored; UI renders EDT with DST.

________________________________________
16) Code skeleton (selected snippets)
Commit with escrow
function commitBid(
  uint256 ipoId,
  bytes32 commitHash,
  uint256 escrowAmount,
  bytes calldata proof
) external {
  IPO storage I = ipos[ipoId];
  require(block.timestamp >= I.commitStart && block.timestamp < I.commitEnd, "not commit");
  require(whitelistProvider.isAllowed(ipoId, _msgSender(), proof), "not allowed");
  require(escrowAmount >= I.reserve && escrowAmount <= I.cap, "outside range");

  BidMeta storage B = bids[ipoId][_msgSender()];
  require(B.status == BidStatus.None || B.status == BidStatus.Canceled || B.status == BidStatus.Superseded, "active");

  // Pull and lock USDC
  require(IERC20(I.currency).transferFrom(_msgSender(), address(this), escrowAmount), "escrow pull fail");

  B.escrowed   = escrowAmount;
  B.commitHash = commitHash;
  B.commitTime = uint64(block.timestamp);
  B.status     = BidStatus.Committed;

  biddersByIPO[ipoId].push(_msgSender());
  ipos[ipoId].commitCount++;
  emit Committed(ipoId, _msgSender()); // no amount in event
}

Edit up/down with 1-hour cooldown
function editBid(
  uint256 ipoId,
  bytes32 newCommitHash,
  uint256 newEscrowAmount,
  bytes calldata proof
) external {
  IPO storage I = ipos[ipoId];
  require(block.timestamp >= I.commitStart && block.timestamp < I.commitEnd, "not commit");
  require(whitelistProvider.isAllowed(ipoId, _msgSender(), proof), "not allowed");
  require(newEscrowAmount >= I.reserve && newEscrowAmount <= I.cap, "outside range");

  uint256 last = lastEditAt[ipoId][_msgSender()];
  require(block.timestamp >= last + 3600, "edit cooldown");
  lastEditAt[ipoId][_msgSender()] = block.timestamp;

  BidMeta storage B = bids[ipoId][_msgSender()];
  require(B.status == BidStatus.Committed, "no commit");

  if (newEscrowAmount > B.escrowed) {
    uint256 add = newEscrowAmount - B.escrowed;
    require(IERC20(I.currency).transferFrom(_msgSender(), address(this), add), "topup fail");
    B.escrowed = newEscrowAmount;
  } else if (newEscrowAmount < B.escrowed) {
    uint256 refund = B.escrowed - newEscrowAmount;
    require(IERC20(I.currency).transfer(_msgSender(), refund), "refund fail");
    B.escrowed = newEscrowAmount;
  }

  B.status = BidStatus.Superseded;
  bids[ipoId][_msgSender()] = BidMeta({
    escrowed:     B.escrowed,
    commitHash:   newCommitHash,
    commitTime:   uint64(block.timestamp),
    amount:       0,
    score:        0,
    status:       BidStatus.Committed
  });

  emit Edited(ipoId, _msgSender());
}

Cancel
function cancelBid(uint256 ipoId) external {
  BidMeta storage B = bids[ipoId][_msgSender()];
  require(B.status == BidStatus.Committed || B.status == BidStatus.Revealed, "nothing");
  uint256 refund = B.escrowed;
  B.escrowed = 0;
  B.status = BidStatus.Canceled;
  require(IERC20(ipos[ipoId].currency).transfer(_msgSender(), refund), "refund fail");
  emit Canceled(ipoId, _msgSender());
}

Winner reveal (public)
function revealWinner(
  uint256 ipoId,
  bytes32 salt,
  uint256 amount,
  uint256 score,
  uint256 epochId,
  bytes calldata scoreSig
) external {
  IPO storage I = ipos[ipoId];
  require(block.timestamp >= I.commitEnd && block.timestamp < I.revealEnd, "not reveal");

  BidMeta storage B = bids[ipoId][_msgSender()];
  require(B.status == BidStatus.Committed, "not committed");
  require(keccak256(abi.encodePacked(salt, amount, _msgSender())) == B.commitHash, "hash mismatch");
  require(amount >= I.reserve && amount <= I.cap, "outside range");

  // score verification (attestation path)
  require(scoreVerifier.verifyScore(_msgSender(), score, epochId, scoreSig), "bad score sig");

  B.amount = amount;
  B.score  = score;
  B.status = BidStatus.Revealed;
  ipos[ipoId].revealCount++;
}

Settle with top-20 and VRF shuffle (outline)
function settleWithRandomness(uint256 ipoId, uint256 randomSeed) external {
  IPO storage I = ipos[ipoId];
  require(block.timestamp >= I.revealEnd, "too early");
  require(!I.settled, "settled");
  emit SettlementStarted(ipoId, randomSeed);

  // 1) Build price tiers high -> low from bids[ipoId][...]
  // 2) For top tier:
  //    - rank by score desc, commitTime asc
  //    - take top 20, shuffle with randomSeed, emit FinalistPool/FinalistOrder
  //    - clearingPrice = max(secondHighest, I.reserve)
  //    - attempt settlement in that order; on success -> WinnerFinal + AuctionOutcome; mark settled
  // 3) If all fail -> next tier
  // 4) If none -> FailedReserve + AuctionOutcome(sold=false)
}

Payout & transfer (helper)
function _settleWinner(IPO storage I, uint256 ipoId, address winner, uint256 clearingPrice) internal {
  BidMeta storage B = bids[ipoId][winner];
  require(B.status == BidStatus.Revealed, "not revealed");
  require(B.escrowed >= clearingPrice, "escrow short");

  // pay seller and clear escrow
  require(IERC20(I.currency).transfer(I.seller, clearingPrice), "payout fail");
  uint256 surplus = B.escrowed - clearingPrice;
  if (surplus > 0) require(IERC20(I.currency).transfer(winner, surplus), "surplus refund fail");
  B.escrowed = 0;

  // deliver NFT
  IERC721(I.asset).safeTransferFrom(I.seller, winner, I.tokenId);
}

________________________________________
17) Admin dApp fields (explicit)
‚óè	Collection (ALX ERC-721), tokenId

‚óè	Seller (custody wallet)

‚óè	Currency (USDC)

‚óè	Market value (OTC, snapshot) ‚Üí cap auto = MV √ó 1.30

‚óè	Reserve (public floor)

‚óè	commitStart, commitEnd, revealEnd (UTC)

‚óè	Whitelist provider (Merkle / Signature)

‚óè	Publish

Public pages
‚óè	Listings: cards with market value, reserve, cap rule, countdown (UTC + EDT).

‚óè	Detail: bid input, sealed commit, edit, cancel, Available Balance display, auto list preference (5/10/15/20, default 5, toggle off).

‚óè	Outcome: winner and clearing price; or failed reserve.

________________________________________
18) What Dev 2 does not own
‚óè	Whitelist source (roots, signers).

‚óè	ALX Score issuance/signing or registry data.

‚óè	DEX auto-listing (Dev 3 listens to AuctionOutcome and lists).

Dev 2 only reads/validates these.
________________________________________
19) Final checklist
‚óè	Naming: ‚ÄúFirst Listings‚Äù everywhere (no IPO in code/UI labels).

‚óè	Public reserve and cap logic on chain; UI mirrors and validates.

‚óè	Escrow at commit; edit top-up/refund; cancel refund; loser release.

‚óè	Only winner revealed publicly; final price emitted.

‚óè	Tie-break: Score ‚Üí top 20 ‚Üí VRF.

‚óè	Permissionless settlement after close; rich events.

‚óè	UTC on chain; UI shows UTC + EDT with DST.

‚óè	No listing fee at First Listing; exchange fees apply later on secondary trades (not in this contract).

________________________________________
This is the complete and final reference for Dev 2.
 If you want, I can also package this as a .docx with a table of contents for sharing.
You said:
Review both thread and all the attachments is this fully completed?
ChatGPT said:
I‚Äôve now reviewed:
‚óè	This full thread with you (today‚Äôs updates, corrections, escrow model, winner-only reveal, reserve/cap rules, edits/cancel, whitelist, T+21, admin dApp, events, etc.)

‚óè	All uploaded drafts:

‚óã	Dev 2 overview.docx

‚óã	8_24_25 ALX IPO / Auction ‚Äî Dev 2 Spec (with changes, rationale, and code sample).docx

‚óã	reply 8_23a.docx

‚óã	ALX IPO Spec - Dev #2 notes and handoff.docx

‚óã	ALX IPO Spec - Dev #2 V1.1.docx

‚óã	ALX IPO Spec - Dev #2 V1.docx

________________________________________
‚úÖ What I verified as complete and consistent
‚óè	Naming: Everything now uses First Listings (IPO references are eliminated except when described as ‚ÄúIPO-like‚Äù).

‚óè	Auction Type: Sealed-bid, commit‚Äìreveal, second-price ‚Üí locked.

‚óè	Funds Handling: Wallet signal fully replaced by escrow; edits/cancels refund/top-up delta.

‚óè	Visibility: Sealed from users (no competitor visibility), host-visible, only winner revealed.

‚óè	Reserve/Cap: Reserve public, cap = OTC √ó 1.30, enforced on chain.

‚óè	T+21: Defined as settlement within 21 days for onboarding, custody verification, and tokenization.

‚óè	Whitelist: External provider (Merkle/proof/sig) required at commit and edit.

‚óè	Tie-breaker: Highest bid wins; ties resolved via Score ranking ‚Üí top 20 ‚Üí VRF shuffle.

‚óè	Settlement: Auto after close; second-price rule; refunds and surplus handled; failed reserve path clear.

‚óè	Events: Cleaned to exclude amounts except final winner; covers commit, edit, cancel, outcome.

‚óè	Admin DApp: Explicit spec (fields, UTC storage, EDT UI, filters/sorts, detail page with auto list % menu).

‚óè	Integration boundaries: Dev 2 doesn‚Äôt own whitelist, score registry, or DEX listing (belongs to Dev 3).

‚óè	Security: Escrow, reentrancy, Safe for admin, Chainlink VRF/Automation.

‚óè	Examples: Rolex case integrated in investor-facing text (margin math checked and correct).

‚óè	Fees: Confirmed no 0.25% fee on First Listings; only on secondary trades.



